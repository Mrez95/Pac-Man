import greenfoot.*;  // (World, Actor, GreenfootImage, Greenfoot and MouseInfo)
import java.awt.Color;

/**
 * Write a description of class MultiPlayer here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class MultiPlayer extends World
{
    private int[][] map = {
        {13,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,14},
        {8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10},
        {8,0,17,17,17,17,17,17,17,17,17,17,17,17,0,5,0,17,17,17,17,16,17,17,17,17,0,5,0,17,17,17,17,17,17,17,17,17,17,17,17,0,10},
        {8,0,17,0,0,0,0,17,0,0,0,0,0,17,0,5,0,17,0,0,0,0,0,0,0,17,0,5,0,17,0,0,0,0,0,17,0,0,0,0,17,0,10},
        {8,0,16,0,2,3,0,17,0,2,4,3,0,17,0,7,0,17,0,18,11,11,11,20,0,17,0,7,0,17,0,2,4,3,0,17,0,2,3,0,16,0,10},
        {8,0,17,0,0,0,0,17,0,0,0,0,0,17,0,0,0,17,0,10,0,0,0,8,0,17,0,0,0,17,0,0,0,0,0,17,0,0,0,0,17,0,10},
        {8,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,21,9,9,9,19,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,10},
        {8,0,17,0,0,0,0,17,0,0,0,17,0,0,0,0,0,17,0,0,0,0,0,0,0,17,0,0,0,0,0,17,0,0,0,17,0,0,0,0,17,0,10},
        {8,0,17,0,2,3,0,17,0,6,0,17,0,2,4,3,0,17,17,17,17,17,17,17,17,17,0,2,4,3,0,17,0,6,0,17,0,2,3,0,17,0,10},
        {8,0,17,0,0,0,0,17,0,5,0,17,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,17,0,5,0,17,0,0,0,0,17,0,10},
        {8,0,17,17,17,17,17,17,0,5,0,17,17,17,17,0,18,11,11,20,0,17,0,18,11,11,20,0,17,17,17,17,0,5,0,17,17,17,17,17,17,0,10},
        {8,0,0,0,0,0,0,17,0,5,0,0,0,0,17,0,10,0,0,8,0,17,0,10,0,0,8,0,17,0,0,0,0,5,0,17,0,0,0,0,0,0,10},
        {0,11,11,11,11,20,0,17,0,10,4,4,3,0,17,0,21,9,9,19,0,17,0,21,9,9,19,0,17,0,2,4,4,8,0,17,0,18,11,11,11,11,0},
        {0,0,0,0,0,8,0,17,0,5,0,0,0,0,17,0,0,0,0,0,0,17,0,0,0,0,0,0,17,0,0,0,0,5,0,17,0,10,0,0,0,0,0},
        {0,0,0,0,0,8,0,17,0,7,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,7,0,17,0,10,0,0,0,0,0},
        {0,0,0,0,0,8,0,17,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,17,0,10,0,0,0,0,0},
        {0,0,0,0,0,8,0,17,17,17,17,17,0,6,0,0,0,6,22,22,22,22,22,22,22,6,0,0,0,6,0,17,17,17,17,17,0,10,0,0,0,0,0},
        {0,0,0,0,0,8,0,17,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,17,0,10,0,0,0,0,0},
        {9,9,9,9,9,19,0,17,0,2,4,4,4,19,0,0,0,5,0,23,0,0,0,24,0,5,0,0,0,21,4,4,4,3,0,17,0,21,9,9,9,9,9},
        {0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,5,0,0,0,27,0,0,0,5,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0},
        {11,11,11,11,11,20,0,17,0,2,4,4,4,20,0,0,0,5,0,25,0,0,0,26,0,5,0,0,0,18,4,4,4,3,0,17,0,18,11,11,11,11,11},
        {0,0,0,0,0,8,0,17,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,17,0,10,0,0,0,0,0},
        {0,0,0,0,0,8,0,17,17,17,17,17,0,7,0,0,0,21,4,4,4,4,4,4,4,19,0,0,0,7,0,17,17,17,17,17,0,10,0,0,0,0,0},
        {0,0,0,0,0,8,0,17,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,17,0,10,0,0,0,0,0},
        {0,0,0,0,0,8,0,17,0,6,0,17,17,17,17,17,17,17,17,17,17,1,17,17,17,17,17,17,17,17,17,17,0,6,0,17,0,10,0,0,0,0,0},
        {0,0,0,0,0,8,0,17,0,5,0,0,0,0,17,0,0,0,0,0,0,17,0,0,0,0,0,0,17,0,0,0,0,5,0,17,0,10,0,0,0,0,0},
        {0,9,9,9,9,19,0,17,0,10,4,4,3,0,17,0,18,11,11,20,0,17,0,18,11,11,20,0,17,0,2,4,4,8,0,17,0,21,9,9,9,9,0},
        {8,0,0,0,0,0,0,17,0,5,0,0,0,0,17,0,10,0,0,8,0,17,0,10,0,0,8,0,17,0,0,0,0,5,0,17,0,0,0,0,0,0,10},
        {8,0,17,17,17,17,17,17,0,5,0,17,17,17,17,0,21,9,9,19,0,17,0,21,9,9,19,0,17,17,17,17,0,5,0,17,17,17,17,17,17,0,10},
        {8,0,17,0,0,0,0,17,0,5,0,17,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,17,0,5,0,17,0,0,0,0,17,0,10},
        {8,0,17,0,2,3,0,17,0,7,0,17,0,2,4,3,0,17,17,17,17,17,17,17,17,17,0,2,4,3,0,17,0,7,0,17,0,2,3,0,17,0,10},
        {8,0,17,0,0,0,0,17,0,0,0,17,0,0,0,0,0,17,0,0,0,0,0,0,0,17,0,0,0,0,0,17,0,0,0,17,0,0,0,0,17,0,10},
        {8,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,18,11,11,11,20,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,10},
        {8,0,17,0,0,0,0,17,0,0,0,0,0,17,0,0,0,17,0,10,0,0,0,8,0,17,0,0,0,17,0,0,0,0,0,17,0,0,0,0,17,0,10},
        {8,0,16,0,2,3,0,17,0,2,4,3,0,17,0,6,0,17,0,21,9,9,9,19,0,17,0,6,0,17,0,2,4,3,0,17,0,2,3,0,16,0,10},
        {8,0,17,0,0,0,0,17,0,0,0,0,0,17,0,5,0,17,0,0,0,0,0,0,0,17,0,5,0,17,0,0,0,0,0,17,0,0,0,0,17,0,10},
        {8,0,17,17,17,17,17,17,17,17,17,17,17,17,0,5,0,17,17,17,17,16,17,17,17,17,0,5,0,17,17,17,17,17,17,17,17,17,17,17,17,0,10},
        {8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10},
        {12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,15},
        };
    public MultiPlayer()
    {    
        // 15/15 cells
        super(731, 701, 1);
        setPaintOrder(Banner.class, Buttons.class, Menu.class, Gate.class, Ghost.class,Player.class, Player2.class,Food.class,Wall.class);
        setActOrder(Player.class,Food.class,Ghost.class,Wall.class,Gate.class);
        Greenfoot.setSpeed(61);
        game();
    }
    public void mapReader(int map,int x,int y)
    {
        if(map<1)
        {
            return;
        }
        if(map<2)
        {
            return;
        }
        if(map<22)
        {
            if(map == 16)
            {
                addObject(new Food1(), y*15+50, x*15+50);
                return;
            }
            if(map == 17)
            {
                addObject(new Food2(), y*15+50, x*15+50);
                return;
            }
            addObject(new Wall(map), y*15+50, x*15+50);
            return;
        }
        switch(map)
        {
            case 22: addObject(new Gate(), y*15+50, x*15+50);
            break;
            case 23:addObject(new Ghost1(), y*15+50, x*15+50);
            break;
            case 24:addObject(new Ghost2(), y*15+50, x*15+50);
            break;
            case 25:addObject(new Ghost3(), y*15+50, x*15+50);
            break;
            case 26:addObject(new Ghost4(), y*15+50, x*15+50);
            break;
            case 27:addObject(new Ghost5(), y*15+50, x*15+50);
            break;
        }
    }
    public void game()
    {
        for (int x = 0; x<map.length; x++) {
            for (int y = 0; y<map[x].length; y++) {
                if(map[x][y]==1) {
                    addObject(new Player(), y*15+35, x*15+50); addObject(new Player2(), y*15+65, x*15+50);
                }
                else mapReader(map[x][y],x,y);
                // if(map[x][y]==2) addObject(new Wall1(), y*15+50, x*15+50);
                // if(map[x][y]==3) addObject(new Wall2(), y*15+50, x*15+50);
                // if(map[x][y]==4) addObject(new Wall3(), y*15+50, x*15+50);
                // if(map[x][y]==5) addObject(new Wall4(), y*15+50, x*15+50);
                // if(map[x][y]==6) addObject(new Wall5(), y*15+50, x*15+50);
                // if(map[x][y]==7) addObject(new Wall6(), y*15+50, x*15+50);
                // if(map[x][y]==8) addObject(new Wall7(), y*15+50, x*15+50);
                // if(map[x][y]==9)  addObject(new Wall8(), y*15+50, x*15+50);
                // if(map[x][y]==10) addObject(new Wall9(), y*15+50, x*15+50);
                // if(map[x][y]==11) addObject(new Wall10(), y*15+50, x*15+50);
                // if(map[x][y]==12) addObject(new Corner1(), y*15+50, x*15+50);
                // if(map[x][y]==13) addObject(new Corner2(), y*15+50, x*15+50);
                // if(map[x][y]==14) addObject(new Corner3(), y*15+50, x*15+50);
                // if(map[x][y]==15) addObject(new Corner4(), y*15+50, x*15+50);
                // if(map[x][y]==16) addObject(new Food1(), y*15+50, x*15+50);
                // if(map[x][y]==17) addObject(new Food2(), y*15+50, x*15+50);
                // if(map[x][y]==18) addObject(new Corner5(), y*15+50, x*15+50);
                // if(map[x][y]==19) addObject(new Corner6(), y*15+50, x*15+50);
                // if(map[x][y]==20) addObject(new Corner7(), y*15+50, x*15+50);
                // if(map[x][y]==21) addObject(new Corner8(), y*15+50, x*15+50);
                // if(map[x][y]==22) addObject(new Gate(), y*15+50, x*15+50);
                // if(map[x][y]==23) addObject(new Ghost1(), y*15+50, x*15+50);
                // if(map[x][y]==24) addObject(new Ghost2(), y*15+50, x*15+50);
                // if(map[x][y]==25) addObject(new Ghost3(), y*15+50, x*15+50);
                // if(map[x][y]==26) addObject(new Ghost4(), y*15+50, x*15+50);
                // if(map[x][y]==27) addObject(new Ghost5(), y*15+50, x*15+50);
            }
        }
        addObject(new Ready(), 365, 530);
        for(int i=0; i<3; i++) {
            addObject(new Life(), 25, 475+i*50);
        }
        for(int i=0; i<3; i++) {
            addObject(new Life(), 715, 475+i*50);
        }
        // for (int x = 0; x<map.length; x++) {
        //     for (int y = 0; y<map[x].length; y++) {
        //         if(map[x][y]==2 || map[x][y]==3 || map[x][y]==4 || map[x][y]==5 || map[x][y]==6 || map[x][y]==7 || map[x][y]==8 || map[x][y]==9 || map[x][y]==10 || map[x][y]==11 || map[x][y]==12 || map[x][y]==13 || map[x][y]==14 || map[x][y]==15 || map[x][y]==18 || map[x][y]==19 || map[x][y]==20 || map[x][y]==21) {
        //             addObject(new Wall(map[x][y]), y*15+50, x*15+50);
        //         }
        //         if(map[x][y]==1) {
        //             addObject(new Player(), y*15+50, x*15+50); addObject(new Player2(), y*15+50, x*15+50);
        //         }
        //         if(map[x][y]==16) addObject(new Food1(), y*15+50, x*15+50);
        //         if(map[x][y]==17) addObject(new Food2(), y*15+50, x*15+50);
        //         if(map[x][y]==22) addObject(new Gate(), y*15+50, x*15+50);
        //         if(map[x][y]==23) addObject(new Ghost1(), y*15+50, x*15+50);
        //         if(map[x][y]==24) addObject(new Ghost2(), y*15+50, x*15+50);
        //         if(map[x][y]==25) addObject(new Ghost3(), y*15+50, x*15+50);
        //         if(map[x][y]==26) addObject(new Ghost4(), y*15+50, x*15+50);
        //         if(map[x][y]==27) addObject(new Ghost5(), y*15+50, x*15+50);
        //     }
        // }
    }
    public void showScore(String message)
    {
        GreenfootImage bg = getBackground();
        bg.setColor(Color.WHITE);
        Player dead1 = isPlayerDead();
        Player2 dead2 = isPlayerDead2();
        if(dead1!=null || dead2!=null) bg.drawString(message, 365, 350);
    }
    private Player isPlayerDead()
    {
        for (Object obj : getObjects(Player.class)) {
            Player a = (Player) obj;
            if(a.deadImage==21) return a;
        }
        return null;
    }
    private Player2 isPlayerDead2()
    {
        for (Object obj : getObjects(Player2.class)) {
            Player2 a = (Player2) obj;
            if(a.deadImage==21) return a;
        }
        return null;
    }
}
